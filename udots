#!/usr/bin/env bash

CONFIG="$HOME/.config/udots/"
REPO="$HOME/git/termux-cfg"
VERSION="0.5.2"

checkDir () { [[ ! -d "$1" ]] && mkdir -p "$1"; }
checkDir "$CONFIG"
checkDir "$REPO"

paint () {
  local output="$1"
  local color="$2"
  local message="$3"
  local rawMessage="$4"
  local resetSeq="\001\033[0m\002"

  case "$output" in
    fg) : "3" ;;
    bg) : "4" ;;
    *) echo "ERROR: '$output' is an unknown color output" ;;
  esac
  local output="$_"
  
  case $color in
    black)  : 0 ;;
    red)    : 1 ;;
    green)  : 2 ;;
    yellow) : 3 ;;
    blue)   : 4 ;;
    purple) : 5 ;;
    cyan)   : 6 ;;
    white)  : 7 ;;
    *) echo "ERROR: '$color' is an unknown color" ;;
  esac
  local color="$_"

  echo -e "\x01\033[${output}${color}m\x02${message}${resetSeq}${rawMessage}"
}


listItems () { 
  echo -e "\nAvailable packages:"
  ls -1 "$REPO" --ignore "LICENSE"
}

err () {
  case "$1" in
    "noPkg")      : "Please specify the package name" ;;
    "noPkgExist") : "Package '$2' does not exist" ;;
    "noTargetExist") : "'$2': No such file or directory" ;;
    "noTarget")   : "Please specify at least a file to add to the package" ;;
    "manyArg")    : "Too many arguments" ;;
    "invalid")    : "Invalid option" ;;
    *)            : "Unknown" ;;
  esac
  
  msg="$_"

  paint fg red "[ERR] $msg"
  [[ "$1" =~ ^(noPkg|noPkgExist)$ ]] && listItems
  exit 1
}


printHelp () {
  cat <<HELPPAGE
Description:
  A bash wrapper for gnu stow to manage dotfiles.

Usage: udots [OPTION] [FILE(S)]

OPTIONS:
  -a, --add [PKGNAME] [FILE(S)]
    Adds a file or multiple files to [PKGNAME] 
    in the dotfiles repo
  
  -d, --delink [PKGNAME]
    Remove links pointing to files in [PKGNAME]
  
  -e, --erase [PKGNAME]
    Remove [PKGNAME] completely from the repo
  
  -l, --list
    List files in the dotfiles repo

  -h, --help
    Print this help message

  -v, --version
    Prints script version
HELPPAGE
}

fullPath () {
  # Remove ending /
  local currentTarget="${1/%\//}"

  # If target is a path
  if [[ "$currentTarget" =~ "/" ]]; then
    # Split last item and path
    IFS=" " read -d "" -r dirName lastItem <<< "${currentTarget%\/*} ${currentTarget##*\/}"

    echo "$(cd "$dirName"; pwd)/$lastItem"
  else
    # Append current dir to the item
    echo "$PWD/$currentTarget"
  fi
}

stowLink () {
  stow -d "$REPO" -t "$HOME" "$1" ${@:2}
  [[ $? -eq 0 ]] && paint fg cyan "Linked:" " $1" || listItems
}

stowDelink () {
  stow -d "$REPO" -t "$HOME" -D "$1" ${@:2}
  [[ $? -eq 0 ]] && paint fg purple "Unlinked:" " $1" || listItems
}

case "$1" in
  "--add"|"-a")
    pkgName="$2"
    [[ -z "$pkgName" ]] && { err noPkg ; }
    
    targets=("${@:3}")
    [[ ${#targets[@]} -eq 0 ]] && { err noTarget ; }

    for target in "${targets[@]}"; do
      [[ ! -e "$target" ]] && err noTargetExist "$target" 

      targetPath="$(fullPath "$target")" 
      targetItem="${targetPath##*\/}"
      
      [[ -h "$target" ]] && {
        paint fg yellow "[WARNING]" " Cannot add '$targetItem' as it is a symlink."
        continue
      }

      tmpPath="${targetPath/$HOME\//}"

      [[ "$tmpPath" != "$targetItem" ]] && newPath="${tmpPath/%\/$targetItem/}"
      
      # Check if file already exists within the package
      [[ -e "$REPO/$pkgName/${newPath:-}${targetItem}" ]] && {
        paint fg yellow "[WARNING]" " '$targetItem' already exists within '$pkgName'"
        continue
      }

      [[ ! -d "$REPO/$pkgName/$newPath" ]] && {
        mkdir -p "$REPO/$pkgName/$newPath"
        [[ $? -eq 0 ]] && paint fg green "Created Package:" " '$pkgName'"
      }

      mv "$targetPath" "$REPO/$pkgName/$newPath"
      [[ $? -eq 0 ]] && paint fg green "Added:" " '$targetItem' => '$pkgName'"

      stowLink "$pkgName"

# =========================================
# DEBUGGING ONLY
# =========================================
#      cat <<EODEBUG
## =========================================
#Config Directory: $CONFIG
#Repo Directory: $REPO
#Package Name: $pkgName
#Target Path: $targetPath
#Target Item: $targetItem
#TMP Path: $tmpPath
#New Path: $newPath
#Moved to: $REPO/$pkgName/$newPath
## =========================================
#
#EODEBUG
# =========================================
    done
    ;;
  
  "--delink"|"-d")
    [[ -z "$2" ]] && err noPkg

    stowDelink "$2" "${@:3}"
    ;;

  "--erase"|"-e")
    [[ $# -gt 2 ]] && err manyArg

    pkgName="$2"
    [[ -z "$pkgName" ]] && err noPkg

    [[ ! -d "$REPO/$pkgName" ]] && err noPkgExist "$pkgName"

    read -rp "Are you ABSLOUTELY sure you want to ERASE '$pkgName'? (y/N) " eraseAnswer

    if [[ "$eraseAnswer" =~ ^(y|Y|yes|Yes)$ ]]; then
      stowDelink "$pkgName"
      rm -rf "$REPO/$pkgName"
      paint fg purple "Erased:" " $pkgName"
    else
      echo -e "\nNothing was deleted"
    fi
    ;;

  "--list"|"-l") listItems ;;
  "--help"|"-h") printHelp ;;
  "--version"|"-v") echo "udots Version ${VERSION}" ;;
  -*) err invalid ;;

  *)
    [[ -z "$1" ]] && err noPkg

    stowLink "$1" ${@:2}
    ;;
esac
