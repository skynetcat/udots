#!/usr/bin/env bash

source "$HOME/.local/lib/umacros"
# source "$CONFIG"

CONFIG="$HOME/.config/udots/"
REPO="$HOME/git/termux-cfg"
VERSION="0.5.2"

checkDir "$CONFIG"
checkDir "$REPO"



# =====================================================
# Help Page
# =====================================================
printHelp () {
  cat <<HELPPAGE
Description:
  A bash wrapper for gnu stow to manage dotfiles.

Usage: udots [OPTION]

OPTIONS:
  -a, --add [PKGNAME] [FILE(S)]
    Adds a file or multiple files to [PKGNAME] 
    in the dotfiles repo
  
  -d, --delink [PKGNAME]
    Remove links pointing to files in [PKGNAME]
  
  -e, --erase [PKGNAME]
    Remove [PKGNAME] completely from the repo
  
  -l, --list
    List files in the dotfiles repo

  -h, --help
    Print this help message

  -v, --version
    Prints script version
HELPPAGE
}



# =====================================================
# Functions
# =====================================================
listItems () { 
  echo -e "\nAvailable packages:"
  ls -1 "$REPO" --ignore "LICENSE"
}

err () {
  case "$1" in
    "noPkg")      : "Please specify the package name" ;;
    "noPkgExist") : "Package '$2' does not exist" ;;
    "noTargetExist") : "'$2': No such file or directory" ;;
    "noTarget")   : "Please specify at least a file to add to the package" ;;
    "manyArg")    : "Too many arguments" ;;
    "invalid")    : "Invalid option" ;;
    *)            : "Unknown" ;;
  esac
  
  msg="$_"

  paint fg red "[ERR] $msg"
  [[ "$1" =~ ^(noPkg|noPkgExist)$ ]] && listItems
  [[ ! "$1" =~ ^(noTargetExist|invalid)$ ]] && exit 1
}

stowLink () {
  stow -d "$REPO" -t "$HOME" "$1" ${@:2}
  
  [[ $? -eq 0 ]] && {
    paint fg cyan "Linked:" " $1"
    return 0
  }
  
  listItems
  exit 1
}

stowDelink () {
  stow -d "$REPO" -t "$HOME" -D "$1" ${@:2}
  
  [[ $? -eq 0 ]] && {
    paint fg purple "Unlinked:" " $1" 
    return 0
  }

  listItems
  exit 1
}



# =====================================================
# Argument Processing
# =====================================================
case "$1" in
  "--add"|"-a")
    pkgName="$2"
    [[ -z "$pkgName" ]] && { err noPkg ; }
    
    targets=("${@:3}")
    [[ ${#targets[@]} -eq 0 ]] && { err noTarget ; }
      
    # If package dir does not exist within the repo, create it
    checkDir "$REPO/$pkgName"
    [[ $? -eq 0 ]] && paint fg green "Created Package:" " '$pkgName'" || exit 1

    # =============================
    # Process list of targets
    # =============================
    for target in "${targets[@]}"; do
      # if target doesn't exist, skip it
      [[ ! -e "$target" ]] && {
        err noTargetExist "$target"
        continue
      }
      
      # If target is a link, skip it
      [[ -h "$target" ]] && {
        paint fg yellow "[WARNING]" " Cannot add '$targetItem' as it is a symlink."
        continue
      }

      targetPath="$(fullPath "$target")" 
      targetItem="${targetPath##*\/}"

      tmpPath="${targetPath/$HOME\//}"

      # If it isn't a direct target inside the home directory, create a path inside the package
      [[ "$tmpPath" != "$targetItem" ]] && newPath="${tmpPath/%\/$targetItem/}"
      
      # Skip if the target already exists within the package
      [[ -e "$REPO/$pkgName/${newPath:-}${targetItem}" ]] && {
        paint fg yellow "[WARNING]" " '$targetItem' already exists within '$pkgName'"
        continue
      }

      mkdir -p "$REPO/$pkgName/$newPath"

      mv "$targetPath" "$REPO/$pkgName/$newPath"
      [[ $? -eq 0 ]] && paint fg green "Added:" " '$targetItem' => '$pkgName'"

      stowLink "$pkgName"

# =========================================
# DEBUGGING ONLY
# =========================================
#      cat <<EODEBUG
## =========================================
#Config Directory: $CONFIG
#Repo Directory: $REPO
#Package Name: $pkgName
#Target Path: $targetPath
#Target Item: $targetItem
#TMP Path: $tmpPath
#New Path: $newPath
#Moved to: $REPO/$pkgName/$newPath
## =========================================
#
#EODEBUG
# =========================================
    done
    ;;
  
  "--erase"|"-e")
    [[ $# -gt 2 ]] && err manyArg

    pkgName="$2"
    [[ -z "$pkgName" ]] && err noPkg

    [[ ! -d "$REPO/$pkgName" ]] && err noPkgExist "$pkgName"

    read -rp "Are you ABSLOUTELY sure you want to ERASE '$pkgName'? (y/N) " eraseAnswer

    if [[ "$eraseAnswer" =~ ^(y|Y|yes|Yes)$ ]]; then
      stowDelink "$pkgName"
      rm -rf "$REPO/$pkgName"
      paint fg purple "Erased:" " $pkgName"
    else
      echo -e "\nNothing was deleted"
    fi
    ;;

  "--list"|"-l") listItems ;;
  "--help"|"-h") printHelp ;;
  "--version"|"-v") echo "udots Version ${VERSION}" ;;

  "--delink"|"-d")
    [[ -z "$2" ]] && err noPkg
    stowDelink "$2" "${@:3}"
    ;;

  -*) 
    err invalid
    echo ""
    printHelp
    ;;

  *)
    [[ -z "$1" ]] && err noPkg
    stowLink "$1" ${@:2}
    ;;
esac
