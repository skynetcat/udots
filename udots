#!/usr/bin/env bash

VERSION="0.1.0"
CONFIG_DIR="$HOME/.config/udots/udots-config.sh"
UMACROS_DIR="$HOME/.local/lib/umacros"

# Dependency error
depError () {
  [[ $? -ne 0 ]] && {
    echo "[DEPENDENCY FAILURE] $1 does not exist"
    exit 1
  }
}

source "$UMACROS_DIR"
depError "$UMACROS_DIR"

source "$CONFIG_DIR"
depError "$CONFIG_DIR"


# =====================================================
# Parse config changes
# =====================================================
for arg in "${allArgs[@]:0:3}"; do
  # Slice each item from arguments into its own array
  pArg "$arg"
  case "${currentArg[0]}" in
    "--adopt")
      ADOPT=1
      ;;

    "--config"|"-c")
      CONFIG_DIR="${currentArg[1]}"
      ;;

    "--repo"|"-r")
      REPO_DIR="${currentArg[1]}"
      ;;
  esac
done

cat <<END
CONFIG: $CONFIG_DIR
REPO:   $REPO_DIR
ADOPT:  $ADOPT
END
exit 0



# =====================================================
# Help Page
# =====================================================
printHelp () {
  cat <<HELPPAGE
Description:
  A bash wrapper for gnu stow to manage dotfiles.

Usage: udots [CONFIG] [OPTION]

CONFIG:
  --adopt
    Use stow with --adopt
  
  -c, --config
    Use a custom config file

  -r, --repo
    Use a custom repo

OPTIONS:
  -i, --install [PKGNAME]
    Install [PKGNAME]

  -a, --add [PKGNAME] [FILE(S)]
    Adds a file or multiple files to [PKGNAME] 
    in the dotfiles repo
  
  -d, --delink [PKGNAME]
    Remove links pointing to files in [PKGNAME]
  
  -z, --erase [PKGNAME]
    Remove [PKGNAME] completely from the repo

  -l, --list
    List files in the dotfiles repo

  -h, --help
    Print this help message

  -v, --version
    Prints script version
HELPPAGE
}

# If help is 1st or last option, print help then exit
if [[ "${@: -1}" =~ ^(-h|--help)$ ]] ||\
   [[ "${1}" =~ ^(-h|--help)$ ]]; then
  printHelp
  exit
fi




# =====================================================
# Functions
# =====================================================
paintMsg () {
  [[ $COLOR -eq 0 ]] && {
    echo "${3}${4}"
    return
  }

  paint "$1" "$2" "$3" "$4"
}

listItems () { 
  echo -e "\nAvailable packages:"
  [[ $COLOR -eq 0 ]] && lscolor="never"
  ls -1 -d "$REPO/"*/ --color="${lscolor:-always}" |\
    sed "s|$REPO/||g; s|/||g" |\
    nl -w3 -s " "
}

err () {
  case "$1" in
    "noAddPkg")   : "Please specify a package name" ;;
    "noPkg")      : "Please specify the package name" ;;
    "noPkgExist") : "Package '$2' does not exist" ;;
    "noTargetExist") : "'$2': No such file or directory" ;;
    "noTarget")   : "Please specify at least a file to add to the package" ;;
    "manyArg")    : "Too many arguments" ;;
    "noArg")      : "No arguments provided" ;;
    "invalid")    : "Invalid option" ;;
    *)            : "Unknown" ;;
  esac
  
  msg="$_"

  paintMsg fg red "[ERR] $msg"
  [[ "$1" =~ ^(noPkg|noPkgExist)$ ]] && listItems
  [[ ! "$1" =~ ^(noTargetExist|invalid)$ ]] && exit 1
}

stowLink () {
  stow -d "$REPO" -t "$HOME" "$1" ${@:2}
  
  [[ $? -eq 0 ]] && {
    paintMsg fg cyan "[Linked]" " $1"
    return 0
  }
  
  listItems
  exit 1
}

stowDelink () {
  stow -d "$REPO" -t "$HOME" -D "$1" ${@:2}
  
  [[ $? -eq 0 ]] && {
    paintMsg fg purple "[Unlinked]" " $1" 
    return 0
  }

  listItems
  exit 1
}



# =====================================================
# Argument Processing
# =====================================================

for arg in "${allArgs[@]}"; do
  # Slice each item into its own array
  IFS=$'\n' read -d "" -ra currentArg <<< "${arg// /$'\n'}"
  case "$1" in
    # ======================================
    # Parse config changes
    # ======================================
    "--adopt")
      stowAdopt=1
      ;;

    "--config"|"-c")
      CONFIG_DIR="$1"
      ;;
    Use a custom config file

    "--repo"|"-r")
      REPO_DIR="$1"
      ;;

    "--add"|"-a")
      pkgName="$2"
      [[ -z "$pkgName" ]] && { err noAddPkg ; }
      
      targets=("${@:3}")
      [[ ${#targets[@]} -eq 0 ]] && { err noTarget ; }
        
      # If package dir does not exist within the repo, create it
      checkDir "$REPO/$pkgName"
      [[ $? -eq 0 ]] && paintMsg fg green "[New PKG]" " '$pkgName'"

      # =============================
      # Process list of targets
      # =============================
      for target in "${targets[@]}"; do

        targetPath="$(fullPath "$target")" 
        targetItem="${targetPath##*\/}"

        tmpPath="${targetPath/$HOME\//}"

        # if target doesn't exist, skip it
        [[ ! -e "$target" ]] && {
          err noTargetExist "$target"
          continue
        }
        
        # If target is a link, skip it
        [[ -h "$target" ]] && {
          paintMsg fg yellow "[WARNING]" " Cannot add '$targetItem' as it is a symlink."
          continue
        }


        # If it isn't a direct target inside the home directory, create a path inside the package
        [[ "$tmpPath" != "$targetItem" ]] && newPath="${tmpPath/%\/$targetItem/}"
        
        # Skip if the target already exists within the package
        [[ -e "$REPO/$pkgName/${newPath:-}${targetItem}" ]] && {
          paintMsg fg yellow "[WARNING]" " '$targetItem' already exists within '$pkgName'"
          continue
        }

        mkdir -p "$REPO/$pkgName/$newPath"

        mv "$targetPath" "$REPO/$pkgName/$newPath"
        [[ $? -eq 0 ]] && paintMsg fg green "[Added]" " '$targetItem'"


  # =========================================
  # DEBUGGING ONLY
  # =========================================
  #      cat <<EODEBUG
  ## =========================================
  #Config Directory: $CONFIG
  #Repo Directory: $REPO
  #Package Name: $pkgName
  #Target Path: $targetPath
  #Target Item: $targetItem
  #TMP Path: $tmpPath
  #New Path: $newPath
  #Moved to: $REPO/$pkgName/$newPath
  ## =========================================
  #
  #EODEBUG
  # =========================================
      done
      
      stowLink "$pkgName"
      ;;
    
    "--erase"|"-z")
      [[ $# -gt 2 ]] && err manyArg

      pkgName="$2"
      [[ -z "$pkgName" ]] && err noPkg

      [[ ! -d "$REPO/$pkgName" ]] && err noPkgExist "$pkgName"

      read -rp "Are you ABSLOUTELY sure you want to ERASE '$pkgName'? (y/N) " eraseAnswer

      if [[ "$eraseAnswer" =~ ^(y|Y|yes|Yes)$ ]]; then
        stowDelink "$pkgName"
        rm -rf "$REPO/$pkgName"
        paintMsg fg purple "[Erased]" " $pkgName"
      else
        echo -e "\nNothing was deleted"
      fi
      ;;

    "--list"|"-l") listItems ;;
    "--help"|"-h") printHelp ;;
    "--version"|"-v") echo "udots Version ${VERSION}" ;;

    "--delink"|"-d")
      [[ -z "$2" ]] && err noPkg
      stowDelink "$2" "${@:3}"
      ;;

    "--install"|"-i")
      [[ -z "$2" ]] && err noPkg
      stowLink "$2" ${@:3}
      ;;

    -*) 
      err invalid
      echo ""
      printHelp
      ;;

    *)
      printHelp
      echo ""
      err noArg
      ;;
  esac
done

