#!/usr/bin/env bash

VERSION="0.1.0"
UMACROS_DIR="$HOME/.local/lib/umacros"

[[ ! -f "${UMACROS_DIR:?Undefined}" ]] && {
  echo "[DEPENDENCY FAILURE] Cannot find umacros"
  exit 1
}
source "$UMACROS_DIR"



# =====================================================
# Error and Colored Messages
# =====================================================
listItems () { 
  echo -e "\nAvailable packages:"
  
  tmpAllPkgs=($(ls -d --color=always "$REPO_DIR/"*/))
  allPkgs=(${tmpAllPkgs[@]//${REPO_DIR//\//\\\/}\//})
  
  for ((i=0;i<${#allPkgs[@]};i++)); do
    printf "%2d: %s\n" $((i+1)) "${allPkgs[$i]//\//}"
  done
}

err () {
  case "$1" in
    "noAddPkg")   : "Please specify a package name" ;;
    "noPkg")      : "Please specify the package name" ;;
    "noPkgExist") : "Package '$2' does not exist" ;;
    "noTargetExist") : "'$2': No such file or directory" ;;
    "noTarget")   : "Please specify at least a file to add to the package" ;;
    "manyArg")    : "Too many arguments for '$2'" ;;
    "manyOp")    : "Too many arguments. Only a single operation is permitted" ;;
    "noArg")      : "No arguments provided" ;;
    "invalid")    : "'$2' is an invalid option" ;;
    "invFile")    : "'$2' is an invalid config file or does not exist" ;;
    "invDir")     : "'$2' is an invalid directory or does not exist" ;;
    "noArgAccept"): "There should not be any arguments for '$2'" ;;
    *)            : "Unknown" ;;
  esac
  
  msg="$_"

  paint fg red "[ERR] $msg"
  [[ "$1" =~ ^(noPkg|noPkgExist)$ ]] && listItems
  [[ ! "$1" =~ ^(noTargetExist|invalid)$ ]] && exit 1
}



# =====================================================
# Parse config changes
# =====================================================
for (( cfgi = 0; cfgi < ${#allArgs[@]}; cfgi++ )); do

  # Slice each item from arguments into its own array
  pArg "${allArgs[$cfgi]}"

  case "${currentArg[0]}" in
    "--config"|"-c")
      [[ ${#currentArg[@]} -gt 2 ]] && err manyArg "--config"
      [[ ! -f "${currentArg[1]}" ]] && err invFile "${currentArg[1]}"

      ARG_CONFIG_DIR="${currentArg[1]}"
      ;;

    "--adopt")
      [[ ${#currentArg[@]} -gt 1 ]] && err noArgAccept "--adopt"

      ARG_ADOPT=1
      ;;

    "--repo")
      [[ ${#currentArg[@]} -gt 2 ]] && err manyArg "--repo"
      [[ ! -d "${currentArg[1]}" ]] && err invDir "${currentArg[1]}"

      ARG_REPO_DIR="${currentArg[1]}"
      ;;

    "--no-backup"|"-nb")
      [[ ${#currentArg[@]} -gt 1 ]] && err noArgAccept "--no-backup"

      ARG_BACKUP=0
      ;;

    "--backup-dir"|"-bd")
      [[ ${#currentArg[@]} -gt 2 ]] && err manyArg "--backup-dir"
      [[ ! -d "${currentArg[1]}" ]] && err invDir "${currentArg[1]}"

      ARG_BACKUP_DIR="${currentArg[1]}"
      ;;

    *)
      break
      ;;
  esac
done

# Removing used config options from arguments
allArgs=("${allArgs[@]:$cfgi}")



# =====================================================
# Modify config variables based on config arguments
# =====================================================
CONFIG_DIR=${ARG_CONFIG_DIR:-${CONFIG_DIR:-$HOME/.config/udots/udots-config.sh}}

source "$CONFIG_DIR"

ADOPT="${ARG_ADOPT:-${ADOPT:-0}}"
REPO_DIR="${ARG_REPO_DIR:-${REPO_DIR:?Please define a repo in the config or by using options}}"
BACKUP="${ARG_BACKUP:-${BACKUP:-1}}"
BACKUP_DIR="${ARG_BACKUP_DIR:-${BACKUP_DIR:?Please specify a backup directory in the config or by using options}}"



# =====================================================
# Help Page
# =====================================================
printHelp () {
  cat <<HELPPAGE
Description:
  A bash wrapper for gnu stow to manage dotfiles.

Usage: udots [CONFIG] [OPERATION]

CONFIG: 
These options MUST be passed before operations. You can pass multiple options

  -c, --config [CONFIG PATH]
    Use a custom config file
  
  --repo [REPO PATH]
    Use a custom repo directory

  --adopt
    Use stow with --adopt

  -nb, --no-backup
    Disable target backup when adding to package

  -bd, --backup-dir
    Use a custom backup directory
  
OPERATIONS: 
Pick a SINGLE option from these and it MUST be passed after config options

  -i, --install [PKGNAME]
    Install [PKGNAME]

  -a, --add [PKGNAME] [FILE(S)]
    Adds a file or multiple files to [PKGNAME] 
    in the dotfiles repo
  
  -d, --delink [PKGNAME]
    Remove links pointing to files in [PKGNAME]
  
  -z, --erase [PKGNAME]
    Remove [PKGNAME] completely from the repo

  -l, --list
    List files in the dotfiles repo

  -h, --help
    Print this help message

  -v, --version
    Prints script version
HELPPAGE
}

# If help is 1st or last option, print help then exit
if [[ "${@: -1}" =~ ^(-h|--help)$ ]] ||\
   [[ "${1}" =~ ^(-h|--help)$ ]]; then
  printHelp
  exit
fi



# =====================================================
# Functions
# =====================================================

stowLink () {
  if [[ $ADOPT -eq 1 ]]; then
    stow -d "$REPO_DIR" -t "$HOME" "$1" --adopt
  else
    stow -d "$REPO_DIR" -t "$HOME" "$1"
  fi

  [[ $? -eq 0 ]] && {
    paint fg cyan "[Linked]" " $1"
    return 0
  }
  
  listItems
  exit 1
}

stowDelink () {
  stow -d "$REPO_DIR" -t "$HOME" -D "$1"
  
  [[ $? -eq 0 ]] && {
    paint fg purple "[Unlinked]" " $1" 
    return 0
  }

  listItems
  exit 1
}

move () {
  local target="$1"
  local dest="$2"

  [[ $BACKUP -eq 1 ]] && {
    if [[ $BACKUP_DIR == "same" ]]; then
      cp -r "$target" "${target}.bak"
    else
      cp -r "$target" "$BACKUP_DIR/${target}.bak"
    fi
  }
  
  mv "$target" "$dest"
}



# If there are no arguments, throw an error
[[ -z "${allArgs[*]}" ]] && {
  err noArg
}

# If operations are more than 1, throw an error
[[ ${#allArgs[@]} -gt 1 ]] && {
  err manyOp
}

# =====================================================
# Operation Processing
# =====================================================
pArg "${allArgs[0]}"
case "${currentArg[0]}" in
  "--add"|"-a")
    pkgName="${currentArg[1]}"
    [[ -z "$pkgName" ]] && { err noAddPkg ; }
    
    targets=("${currentArg[@]:2}")
    [[ ${#targets[@]} -eq 0 ]] && { err noTarget ; }
      
    # If package dir does not exist within the repo, create it
    checkDir "$REPO_DIR/$pkgName"
    paint fg green "[New PKG]" " '$pkgName'"

    # =============================
    # Process list of targets
    # =============================
    for target in "${targets[@]}"; do

      targetPath="$(fullPath "$target")" 
      targetItem="${targetPath##*\/}"

      tmpPath="${targetPath/$HOME\//}"

      # if target doesn't exist, skip it
      [[ ! -e "$target" ]] && {
        err noTargetExist "$target"
        continue
      }
      
      # If target is a link, skip it
      [[ -h "$target" ]] && {
        paint fg yellow "[WARNING]" " Cannot add '$targetItem' as it is a symlink."
        continue
      }


      # If it isn't a direct target inside the home directory, create a path inside the package
      [[ "$tmpPath" != "$targetItem" ]] && newPath="${tmpPath/%\/$targetItem/}"
      
      # Skip if the target already exists within the package
      [[ -e "$REPO_DIR/$pkgName/${newPath:-}${targetItem}" ]] && {
        paint fg yellow "[WARNING]" " '$targetItem' already exists within '$pkgName'"
        
        echo -e "Do you wish to $(paint fg purple "REPLACE") it?"
        read -rp "(y/N) " replaceAnswer

        if [[ "$replaceAnswer" =~ ^(y|Y|yes|Yes)$ ]]; then
          move "$targetPath" "$REPO_DIR/$pkgName/$newPath" "$targetItem"
          paint fg purple "[Replaced]" " '$targetItem'"
        else
          echo -e "\nNothing was replaced"
        fi

        continue
      }

      mkdir -p "$REPO_DIR/$pkgName/$newPath"

      move "$targetPath" "$REPO_DIR/$pkgName/$newPath" "$targetItem"
      paint fg green "[Added]" " '$targetItem'"


# =========================================
# DEBUGGING ONLY
# =========================================
#      cat <<EODEBUG
## =========================================
#Config Directory: $CONFIG
#Repo Directory: $REPO_DIR
#Package Name: $pkgName
#Target Path: $targetPath
#Target Item: $targetItem
#TMP Path: $tmpPath
#New Path: $newPath
#Moved to: $REPO_DIR/$pkgName/$newPath
## =========================================
#
#EODEBUG
# =========================================
    done
    ;;
  
  "--erase"|"-z")
    [[ ${#currentArg[@]} -gt 2 ]] && err manyArg "--erase"

    pkgName="${currentArg[1]}"
    [[ -z "$pkgName" ]] && err noPkg

    [[ ! -d "$REPO_DIR/$pkgName" ]] && err noPkgExist "$pkgName"

    echo -e "Are you ABSLOUTELY sure you want to $(paint fg purple "ERASE") '$pkgName' ?"
    read -rp "(y/N) " eraseAnswer
    echo ""

    if [[ "$eraseAnswer" =~ ^(y|Y|yes|Yes)$ ]]; then
      stowDelink "$pkgName"
      $ERASE_CMD "$REPO_DIR/$pkgName"
      paint fg purple "[Erased]" " $pkgName"
    else
      echo -e "\nNothing was deleted"
    fi
    ;;

  "--list"|"-l") listItems ;;
  "--help"|"-h") printHelp ;;
  "--version"|"-v") echo "udots Version ${VERSION}" ;;

  "--delink"|"-d")
    [[ -z "${currentArg[1]}" ]] && err noPkg
    stowDelink "${currentArg[1]}"
    ;;

  "--install"|"-i")
    [[ -z "${currentArg[1]}" ]] && err noPkg
    stowLink "${currentArg[1]}"
    ;;

  -*) 
    printHelp
    echo ""
    err invalid "${currentArg[0]}"
    ;;
esac
