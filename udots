#!/usr/bin/env bash

CONFIG="$HOME/.config/udots/"
REPO="$HOME/git/termux-cfg"
VERSION="0.4.0"

checkDir () {
  if [[ ! -d "$1" ]]; then
    mkdir -p "$1"
  fi
}

checkDir "$CONFIG"
checkDir "$REPO"


printHelp () {
  cat <<HELPPAGE
Description:
  A bash wrapper for gnu stow to manage dotfiles.

Usage: udots [OPTION] [FILE(S)]

OPTIONS:
  -a, --add [PKGNAME] [FILE(S)]
    Adds a file or multiple files to [PKGNAME] 
    in the dotfiles repo
  
  -d, --delink [PKGNAME]
    Remove links pointing towards files in [PKGNAME]
  
  -l, --list
    List files in the dotfiles repo

  -h, --help
    Print this help message

  -v, --version
    Prints script version
HELPPAGE
}

fullPath () {
  # Remove ending /
  currentTarget="${1/%\//}"

  # If target is a path
  if [[ "$currentTarget" =~ "/" ]]; then
    # Split last item and path
    IFS=" " read -d "" -r dirName lastItem <<< "${currentTarget%\/*} ${currentTarget##*\/}"

    echo "$(cd "$dirName"; pwd)/$lastItem"
  else
    # Append current dir to the item
    echo "$PWD/$currentTarget"
  fi
}

case "$1" in
  "--add"|"-a")
    pkgName="$2"
    targets=("${@:3}")

    if [[ -z "$pkgName" ]]; then
      echo "[ERR] Please specify a package name"
      exit 1
    fi

    if [[ ${#targets[@]} -eq 0 ]]; then
      echo "[ERR] Please specify at least a file to add to the package"
      exit 1
    fi

    for target in "${targets[@]}"; do
      if [[ ! -e "$target" ]]; then
        echo "[ERR] $target: No such file or directory"
        exit 1
      fi
      targetPath="$(fullPath "$target")" 
      targetItem="${targetPath##*\/}"

      tmpPath="${targetPath/$HOME\//}"
      newPath="${tmpPath/%\/$targetItem/}"

      mkdir -p "$REPO/$pkgName/$newPath"
      
      if [[ $? -eq 0 ]]; then
        echo "Created: $pkgName"
      fi

      mv "$targetPath" "$REPO/$pkgName/$newPath"
      
      if [[ $? -eq 0 ]]; then
        echo "Added $targetItem to $pkgName"
      fi

      stow -d "$REPO" -t "$HOME" "$pkgName"
      
      if [[ $? -eq 0 ]]; then
        echo "Linked: $pkgName"
      fi

      # =========================================
      # DEBUGGING ONLY
      # =========================================
      #echo "# ========================================="
      #echo "Config Directory: $CONFIG"
      #echo "Repo Directory: $REPO"
      #echo "Package Name: $pkgName"
      #echo "Target Path: $targetPath"
      #echo "Target Item: $targetItem"
      #echo "New Path: $newPath"
      #echo "Moved to: $REPO/$pkgName/$newPath"
      #echo -e "# =========================================\n"
      # =========================================
    done
    ;;
  
  "--delink"|"-d")
    if [[ $# -gt 2 ]]; then
      echo "[ERR] Too many arguments"
    else
      if [[ -n "$2" ]]; then
        stow -d "$REPO" -t "$HOME" -D "$2"
        if [[ $? -eq 0 ]]; then
          echo "Unlinked: $2"
        else
          echo -e "\nAvailable packages:"
          ls -1 "$REPO" --ignore "LICENSE"
        fi
      else
        echo "[ERR] Please specify the package name"
      fi
    fi
    ;;

  "--list"|"-l")
    ls -1 "$REPO" --ignore "LICENSE"
    ;;

  "--help"|"-h")
    printHelp
    ;;

  "--version"|"-v")
    echo "udots Version ${VERSION}"
    ;;

  *)
    if [[ $# -gt 1 ]]; then
      echo "[ERR] Too many arguments"
    else
      if [[ -n "$1" ]]; then
        stow -d "$REPO" -t "$HOME" "$1"
        if [[ $? -eq 0 ]]; then
          echo "Linked: $1"
        else
          echo -e "\nAvailable packages:"
          ls -1 "$REPO" --ignore "LICENSE"
        fi
      else
        echo "[ERR] Please specify the package name"
      fi
    fi
    ;;
esac
